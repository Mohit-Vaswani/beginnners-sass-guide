// This is how you can import partials
// @import "_colors.scss"; // first way to import
@use "_colors.scss" as colors1; // 2nd way ( importing as a module )
@use "_colors2.scss" as colors2;


// Variables in scss
$color1: #dbdbdb; 
$color2: #F875AA;
$large: 1.2rem;
$small: 0.5rem;
$w: 2rem;

// We can also make an array of variable

$bgColor: #ED7D31, #303030, #7752FE;


// Scss provides nesting

body{
    margin: 0;
    padding: 0;
    color: $color1; // This is how you can access a variable
    background: nth($bgColor, 2); // This is how you access any nth child class from array
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    
    #app{
        h1{
            font-size: 2rem;
            text-align: center;
        }
        ol{
            line-height: 2;
            li{
                font-size: $large;
                a{
                    color: nth($bgColor , 3 );
                }
            }
        }
    }

}

// We can also give some specific properties to any element according to our needs.

#exampleBox{
    width: 300px;
    height: 200px;
    padding: 1rem;
    margin-left: 2rem;
    background: colors1.$pink;
    > a {
        color: colors2.$blue;
    }
    > p {
        font-size: 2rem;
    }
}

// How to give properties of one element to other

.firstBtn{
    background: white;
    color: black;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 18px;
    margin: 2rem;
}

.secondBtn{
    @extend .firstBtn;
    background: burlywood; // in this we have to write some extra code that's why mixins is better
}

// Mixins

@mixin customBtn($color: gray){ // this is how we can give default color also : white
    background: $color;
    color: black;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 18px;
    margin: 2rem;
}

.thirdBtn{
    @include customBtn(hotpink);
}

.fourthBtn{
    @include customBtn(colors1.$green);

    // operators
    width: $w * 8;
}

.fifthBtn{
    @include customBtn;

    &:hover{
        opacity: 0.5;
    }
}
